// Generated by CoffeeScript 1.12.6
var BarChart, Chart, React, d3, helpers,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require('preact');

d3 = require('d3');

helpers = require('./helpers');

Chart = require('./chart');

module.exports = BarChart = (function(superClass) {
  extend(BarChart, superClass);

  function BarChart() {
    return BarChart.__super__.constructor.apply(this, arguments);
  }

  BarChart.prototype.xDomain = function() {
    var x_extent;
    x_extent = d3.extent(this.props.data, function(d) {
      return d.x;
    });
    x_extent[1] += 1;
    return x_extent;
  };

  BarChart.prototype.renderChart = function() {
    var adjust, bar_width, color, data, height, onClick, padding, r, ref, ref1, width, x, y;
    ref = this.props, width = ref.width, height = ref.height, padding = ref.padding, data = ref.data, bar_width = ref.bar_width, adjust = ref.adjust, color = ref.color, r = ref.r, onClick = ref.onClick;
    ref1 = this.state, x = ref1.x, y = ref1.y;
    bar_width || (bar_width = width / data.length - 1);
    r || (r = 0);
    return React.createElement("svg", {
      "className": 'bar-chart',
      "style": {
        width: width,
        height: height,
        position: 'absolute',
        top: 0
      }
    }, data.map((function(_this) {
      return function(d, di) {
        var last_y, this_x, this_y;
        last_y = y(d.y0 || y.domain()[0]);
        this_y = y(d.y1 || d.y);
        this_x = x(d.x);
        return React.createElement("rect", {
          "onClick": onClick != null ? onClick.bind(null, d) : void 0,
          "key": di,
          "rx": r,
          "ry": r,
          "x": this_x,
          "y": this_y,
          "width": bar_width,
          "height": last_y - this_y,
          "fill": helpers.interpretColor(color)
        });
      };
    })(this)));
  };

  return BarChart;

})(Chart);
