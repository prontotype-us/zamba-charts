// Generated by CoffeeScript 1.10.0
var React, axis_formats;

React = require('react');

axis_formats = {};

exports.XAxis = React.createClass({displayName: "XAxis",
  render: function() {
    var axis_size, format, formatter, height, options, padding, position, ref, style, width, x;
    ref = this.props, width = ref.width, height = ref.height, x = ref.x, options = ref.options, axis_size = ref.axis_size, padding = ref.padding, position = ref.position, formatter = ref.formatter, format = ref.format;
    height = axis_size;
    style = {
      width: width,
      height: height,
      position: 'absolute',
      left: padding + axis_size
    };
    if (position === 'bottom') {
      style.bottom = 0;
    } else {
      style.top = 0;
    }
    return React.createElement("svg", {
      "className": 'axis x-axis',
      "style": style
    }, x.ticks((options != null ? options.ticks : void 0) || 10).map((function(_this) {
      return function(t, ti) {
        var label;
        label = (options != null ? options.formatter : void 0) != null ? options.formatter(t)() : t.toFixed(0);
        return React.createElement("text", {
          "x": x(t),
          "y": height - 6,
          "textAnchor": 'middle',
          "key": ti
        }, label);
      };
    })(this)), ((options != null ? options.label : void 0) ? React.createElement("text", {
      "className": 'label',
      "x": width,
      "y": height,
      "key": 'label',
      "style": {
        fontWeight: 'bold'
      }
    }, options.label) : void 0));
  }
});

exports.YAxis = React.createClass({displayName: "YAxis",
  render: function() {
    var axis_size, format, formatter, height, options, padding, ref, width, y;
    ref = this.props, width = ref.width, height = ref.height, y = ref.y, options = ref.options, axis_size = ref.axis_size, padding = ref.padding, formatter = ref.formatter, format = ref.format;
    width = axis_size;
    return React.createElement("svg", {
      "className": 'axis y-axis',
      "style": {
        width: width,
        height: height,
        position: 'absolute',
        left: 0,
        top: padding
      }
    }, y.ticks((options != null ? options.ticks : void 0) || (height / 20)).map(function(t, ti) {
      return React.createElement("text", {
        "y": y(t),
        "x": width / 2,
        "textAnchor": 'middle',
        "key": ti
      }, t.toFixed(0));
    }), ((options != null ? options.label : void 0) ? React.createElement("text", {
      "className": 'label',
      "y": 0,
      "x": width / 2,
      "key": 'label',
      "style": {
        fontWeight: 'bold'
      }
    }, options.label) : void 0));
  }
});
