// Generated by CoffeeScript 1.10.0
var Chart, React, StackedBarChart, d3, helpers,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require('preact');

d3 = require('d3');

Chart = require('./chart');

helpers = require('./helpers');

module.exports = StackedBarChart = (function(superClass) {
  extend(StackedBarChart, superClass);

  function StackedBarChart() {
    return StackedBarChart.__super__.constructor.apply(this, arguments);
  }

  StackedBarChart.prototype.multi = true;

  StackedBarChart.prototype.renderChart = function() {
    var bar_gap, bar_width, color, data, height, onClick, padding, r, ref, width, x, x_extent, y;
    ref = this.props, width = ref.width, height = ref.height, padding = ref.padding, data = ref.data, x = ref.x, y = ref.y, r = ref.r, bar_width = ref.bar_width, color = ref.color, onClick = ref.onClick;
    x_extent = d3.extent(data, function(d) {
      return d.x;
    });
    bar_width || (bar_width = Math.floor(width / data.length - 1));
    bar_gap = 0;
    r || (r = 0);
    return React.createElement("svg", {
      "className": 'bar-chart',
      "style": {
        width: width,
        height: height,
        position: 'absolute',
        top: 0
      }
    }, data.map((function(_this) {
      return function(d, di) {
        var group, group_value, last_y, this_y;
        return React.createElement("g", {
          "transform": "translate(" + (x(d.x)) + ")",
          "onClick": onClick != null ? onClick.bind(null, d) : void 0
        }, (function() {
          var ref1, results;
          ref1 = d.grouped;
          results = [];
          for (group_value in ref1) {
            group = ref1[group_value];
            last_y = y(group.y0);
            this_y = y(group.y1);
            results.push(React.createElement("rect", {
              "key": group_value,
              "y": this_y + bar_gap,
              "rx": r,
              "ry": r,
              "width": bar_width,
              "height": last_y - this_y - bar_gap,
              "fill": helpers.interpretColor(color, group_value)
            }));
          }
          return results;
        })());
      };
    })(this)));
  };

  return StackedBarChart;

})(Chart);
