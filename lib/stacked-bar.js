// Generated by CoffeeScript 1.8.0
var Chart, React, StackedBarChart, d3, helpers;

React = require('react');

d3 = require('d3');

Chart = require('./chart');

helpers = require('./helpers');

module.exports = StackedBarChart = React.createClass({
  mixins: [Chart],
  multi: true,
  renderChart: function() {
    var bar_gap, bar_width, color, data, height, onClick, padding, width, x, x_extent, y, _ref;
    _ref = this.props, width = _ref.width, height = _ref.height, padding = _ref.padding, data = _ref.data, x = _ref.x, y = _ref.y, bar_width = _ref.bar_width, color = _ref.color, onClick = _ref.onClick;
    x_extent = d3.extent(data, function(d) {
      return d.x;
    });
    bar_width || (bar_width = Math.floor(width / data.length - 1));
    bar_gap = 0;
    return React.createElement("svg", {
      "className": 'bar-chart',
      "style": {
        width: width,
        height: height,
        position: 'absolute',
        top: 0
      }
    }, data.map((function(_this) {
      return function(d, di) {
        var group, group_value, last_y, this_y;
        return React.createElement("g", {
          "transform": "translate(" + (x(d.x)) + ")",
          "onClick": onClick != null ? onClick.bind(null, d) : void 0
        }, (function() {
          var _ref1, _results;
          _ref1 = d.grouped;
          _results = [];
          for (group_value in _ref1) {
            group = _ref1[group_value];
            last_y = y(group.y0);
            this_y = y(group.y1);
            _results.push(React.createElement("rect", {
              "key": group_value,
              "y": this_y + bar_gap,
              "width": bar_width,
              "height": last_y - this_y - bar_gap,
              "fill": helpers.interpretColor(color, group_value)
            }));
          }
          return _results;
        })());
      };
    })(this)));
  }
});
