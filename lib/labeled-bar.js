// Generated by CoffeeScript 1.12.7
var Chart, LabeledBarChart, React, d3,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require('react');

d3 = require('d3');

Chart = require('./chart');

module.exports = LabeledBarChart = (function(superClass) {
  extend(LabeledBarChart, superClass);

  function LabeledBarChart() {
    return LabeledBarChart.__super__.constructor.apply(this, arguments);
  }

  LabeledBarChart.prototype.chartHeight = function() {
    var height, label_height, max_label_length, ref, rotate;
    max_label_length = (rotate = (ref = this.props.x_axis) != null ? ref.rotate : void 0) ? (max_label_length = 0, this.props.data.forEach(function(d) {
      var ref1;
      if ((d != null ? (ref1 = d.label) != null ? ref1.length : void 0 : void 0) > max_label_length) {
        return max_label_length = d.label.length;
      }
    }), label_height = max_label_length * 6 * Math.sin(Math.PI * Math.abs(rotate) / 180)) : label_height = 8;
    height = this.props.height + (this.props.el_padding || 0) + 15 + label_height;
    return height;
  };

  LabeledBarChart.prototype.renderChart = function() {
    var axis_size, bar_padding, bar_width, cell_width, chart_height, data, height, horizontal, num_bars, options, ref, ref1, ref2, rotate_labels, width, x, x_extent, y;
    ref = this.props, width = ref.width, height = ref.height, data = ref.data, x = ref.x, y = ref.y, options = ref.options, axis_size = ref.axis_size;
    ref1 = this.state, x = ref1.x, y = ref1.y;
    if (options != null) {
      bar_padding = options.bar_padding, bar_width = options.bar_width, horizontal = options.horizontal;
    }
    num_bars = data.length;
    bar_padding || (bar_padding = 10);
    rotate_labels = (ref2 = this.props.x_axis) != null ? ref2.rotate : void 0;
    x_extent = d3.extent([0, width]);
    cell_width = Math.floor(width / num_bars - 1);
    y || (y = d3.scaleLinear().domain([
      0, d3.max(data, function(d) {
        return d.y;
      })
    ]).range([height, 0]));
    chart_height = height + 2 * 25;
    return React.createElement("svg", {
      "className": 'bar-chart',
      "style": {
        width: width,
        height: chart_height,
        position: 'absolute'
      },
      "height": chart_height,
      "width": width
    }, data.map((function(_this) {
      return function(d, di) {
        var l, label_height, label_width, label_x, label_x_tmp, label_y, label_y_tmp, text_anchor;
        return React.createElement("g", {
          "className": 'bar'
        }, (l = d.label, label_width = 6.5 * l.length, label_height = 8, label_x = cell_width * (di + 0.5), label_y = height + bar_padding + 15, rotate_labels > 0 ? text_anchor = 'start' : rotate_labels < 0 ? text_anchor = 'end' : text_anchor = 'middle', horizontal ? (label_y_tmp = label_y, label_x_tmp = label_x, label_x = label_y, label_y = label_x_tmp) : void 0, React.createElement("text", {
          "className": 'label',
          "y": label_y,
          "x": label_x,
          "width": cell_width,
          "text-anchor": text_anchor,
          "transform": "rotate(" + rotate_labels + "," + label_x + "," + label_y + ")"
        }, l)), React.createElement("rect", {
          "key": di,
          "x": cell_width * (di + 0.5) - bar_width / 2,
          "y": y(d.y),
          "width": bar_width || (cell_width - bar_padding),
          "height": height - y(d.y),
          "fill": d.color || _this.props.color,
          "onClick": typeof onClick !== "undefined" && onClick !== null ? onClick.bind(null, data[di]) : void 0
        }));
      };
    })(this)));
  };

  return LabeledBarChart;

})(Chart);
