// Generated by CoffeeScript 1.10.0
var Gauge, React, color, d3,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require('react');

d3 = require('d3');

color = d3.scaleOrdinal(d3.schemeCategory20);

Gauge = (function(superClass) {
  extend(Gauge, superClass);

  function Gauge() {
    return Gauge.__super__.constructor.apply(this, arguments);
  }

  Gauge.prototype.angleFromValue = function(val) {
    var angle, full_arc;
    full_arc = (this.end_angle - this.start_angle) || Math.PI * 2;
    return angle = (full_arc * (val - this.min) / (this.max - this.min)) + this.start_angle;
  };

  Gauge.prototype.renderGuide = function() {
    var arc, arc_params, d, end_angle, radius, start_angle, thickness;
    radius = this.radius, thickness = this.thickness, start_angle = this.start_angle, end_angle = this.end_angle;
    arc = d3.arc().innerRadius(radius - Math.floor(thickness / 2) - 2).startAngle(start_angle).endAngle(end_angle).outerRadius(radius - Math.ceil(thickness / 2) + 2).padRadius(2).cornerRadius(2)(arc_params);
    arc_params = {
      startAngle: 0,
      endAngle: Math.PI * 2,
      value: 100,
      data: 100
    };
    d = arc;
    return React.createElement("g", {
      "key": 'guide',
      "className": 'guide'
    }, React.createElement("path", {
      "onClick": (function() {}),
      "key": 'guide-path',
      "x": radius,
      "y": radius,
      "d": d,
      "fill": "#ccc"
    }));
  };

  Gauge.prototype.render = function() {
    var a_color, arc, bar, d, data, di, end_angle, guide, height, label_d_y, label_padding, markers, max, min, radius, ref, ref1, renderMarker, show_value, start_angle, thickness, title, value, value_color, value_data, value_range, width;
    ref = this.props, width = ref.width, height = ref.height, data = ref.data, title = ref.title, value = ref.value, title = ref.title;
    ref1 = this.props, min = ref1.min, max = ref1.max, start_angle = ref1.start_angle, end_angle = ref1.end_angle, show_value = ref1.show_value, guide = ref1.guide, bar = ref1.bar, label_padding = ref1.label_padding;
    this.min = min || 0;
    this.max = max || 100;
    this.show_value || (this.show_value = false);
    this.thickness = thickness = (bar != null ? bar.thickness : void 0) || 25;
    this.guide_thickness = (guide != null ? guide.thickness : void 0) || 4;
    label_padding || (label_padding = 0);
    this.radius = radius = (Math.min(width, height) / 2) - label_padding;
    this.start_angle = start_angle || (start_angle = 0);
    this.end_angle = end_angle || (end_angle = Math.PI * 2);
    this.label_d_y = label_d_y = this.props.label_d_y || 0;
    markers = data.filter(function(d) {
      return d.type === 'marker';
    });
    renderMarker = (function(_this) {
      return function(marker, i) {
        var angle, arc, arc_params, d, label_x, label_y, ref2;
        arc = d3.arc().innerRadius(radius - thickness).outerRadius(radius).padRadius(2).cornerRadius(2);
        angle = _this.angleFromValue(marker.value);
        arc_params = {
          startAngle: angle - 0.1,
          endAngle: angle + 0.1,
          value: marker.value,
          data: marker.value
        };
        d = arc.innerRadius(radius - (thickness + 2)).outerRadius(radius + 2)(arc_params);
        ref2 = arc.outerRadius(radius + 75).centroid(arc_params), label_x = ref2[0], label_y = ref2[1];
        return React.createElement("g", {
          "key": i
        }, React.createElement("path", {
          "onClick": (function() {}),
          "key": i,
          "x": radius,
          "y": radius,
          "d": d,
          "fill": "#888",
          "onClick": typeof onClick !== "undefined" && onClick !== null ? onClick.bind(null, marker) : void 0
        }), (marker.label ? React.createElement("text", {
          "className": 'marker-label',
          "x": label_x - 35,
          "y": label_y,
          "key": 'label',
          "style": {
            fontWeight: 'bold'
          }
        }, marker.label + ' - ' + marker.value) : void 0));
      };
    })(this);
    value_data = data.filter(function(d) {
      return d.type === 'value';
    })[0];
    value = value_data.value;
    value_color = value_data.color;
    value_range = [value, this.max - value];
    arc = d3.arc().innerRadius(radius - thickness).outerRadius(radius).padRadius(2).cornerRadius(2).startAngle(start_angle);
    return React.createElement("svg", {
      "className": 'gauge-chart',
      "key": 'gauge',
      "style": {
        position: 'relative',
        width: width,
        height: height
      }
    }, React.createElement("g", {
      "key": 'mover',
      "transform": "translate(" + (radius + label_padding) + ", " + (radius + label_padding) + ")"
    }, (!(guide != null ? guide.hidden : void 0) ? this.renderGuide() : void 0), React.createElement("g", {
      "className": 'gauge-bar'
    }, (di = 0, d = arc({
      endAngle: this.angleFromValue(value)
    }), a_color = value_color || color(di), React.createElement("path", {
      "onClick": (function() {}),
      "key": di,
      "x": radius,
      "y": radius,
      "d": d,
      "fill": (di === 1 ? 'none' : a_color)
    }))), (show_value ? React.createElement("text", {
      "className": 'value',
      "x": 0.,
      "y": label_d_y,
      "alignment-baseline": 'middle',
      "text-anchor": 'middle'
    }, value) : void 0), ((markers != null ? markers.length : void 0) ? markers.map(renderMarker) : void 0)));
  };

  return Gauge;

})(React.Component);

module.exports = Gauge;
