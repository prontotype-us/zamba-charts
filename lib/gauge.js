// Generated by CoffeeScript 1.10.0
var Gauge, React, d3;

React = require('react');

d3 = require('d3');

Gauge = React.createClass({displayName: "Gauge",
  render: function() {
    var arc, arcs, color, gauge_pieces, guide_arc, height, label_d_y, markers, max, min, options, pie, radius, range, ref, show_value, thickness, title, value, width;
    ref = this.props, width = ref.width, height = ref.height, title = ref.title, value = ref.value, options = ref.options, title = ref.title;
    min = this.props.options.min || 0;
    max = this.props.options.max || 100;
    label_d_y = this.props.options.label_d_y || 5;
    thickness = this.props.options.thickness || 25;
    show_value = this.props.options.show_value || false;
    gauge_pieces = this.props.data.map((function(_this) {
      return function(d, i) {
        var color, label;
        return value = d.value, label = d.label, color = d.color, d;
      };
    })(this));
    value = this.props.data.filter(function(d) {
      return d.type === 'value';
    })[0].value;
    markers = this.props.data.filter(function(d) {
      return d.type === 'marker';
    });
    range = [value, max - value];
    radius = Math.min(width, height) / 2;
    color = d3.scaleOrdinal(d3.schemeCategory20);
    pie = d3.pie().value(function(d) {
      return d;
    });
    arc = d3.arc().innerRadius(radius - thickness).outerRadius(radius).padRadius(2);
    arcs = pie(range).map(function(d) {
      return arc(d);
    });
    guide_arc = d3.arc().innerRadius(radius - thickness / 2 - 2).outerRadius(radius - thickness / 2 + 2).padRadius;
    return React.createElement("svg", {
      "className": 'gauge-chart',
      "key": 'gauge',
      "style": {
        position: 'relative',
        width: width,
        height: height
      }
    }, React.createElement("g", {
      "transform": "translate(" + radius + ", " + radius + ")"
    }, arcs.map((function(_this) {
      return function(d, di) {
        var a_color, ref1;
        a_color = ((ref1 = _this.props.data[di]) != null ? ref1.color : void 0) || color(di);
        return React.createElement("path", {
          "onClick": (function() {}),
          "key": di,
          "x": radius,
          "y": radius,
          "d": d,
          "fill": (di === 1 ? 'none' : a_color)
        });
      };
    })(this))), (show_value ? React.createElement("text", {
      "x": radius,
      "y": radius + label_d_y,
      "textAnchor": 'middle'
    }, value) : void 0));
  }
});

module.exports = Gauge;
