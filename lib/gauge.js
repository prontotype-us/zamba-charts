// Generated by CoffeeScript 1.12.7
var Gauge, React, d3,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require('react');

d3 = require('d3');

Gauge = (function(superClass) {
  extend(Gauge, superClass);

  function Gauge() {
    return Gauge.__super__.constructor.apply(this, arguments);
  }

  Gauge.prototype.angleFromValue = function(val) {
    var angle, end_angle, full_arc, max, min, ref, start_angle;
    ref = this.props, min = ref.min, max = ref.max, end_angle = ref.end_angle, start_angle = ref.start_angle;
    full_arc = (end_angle - start_angle) || Math.PI * 2;
    return angle = (full_arc * (val - min) / (max - min)) + start_angle;
  };

  Gauge.prototype.computeRadius = function() {
    var height, label_padding, ref, width;
    ref = this.props, width = ref.width, height = ref.height, label_padding = ref.label_padding;
    return (Math.min(width, height) / 2) - label_padding;
  };

  Gauge.prototype.render = function() {
    var arc, arc_data, arc_params, bar, color, end_angle, guide, height, label_padding, label_y, markers, max, min, radius, ref, show_value, start_angle, value, value_range, width;
    ref = this.props, width = ref.width, height = ref.height, min = ref.min, max = ref.max, value = ref.value, color = ref.color, start_angle = ref.start_angle, end_angle = ref.end_angle, show_value = ref.show_value, bar = ref.bar, guide = ref.guide, markers = ref.markers, label_padding = ref.label_padding, label_y = ref.label_y;
    radius = this.computeRadius();
    value_range = [value, max - -value];
    arc = d3.arc().innerRadius(radius - bar.thickness).outerRadius(radius).padRadius(2).cornerRadius(2);
    arc_params = {
      startAngle: start_angle,
      endAngle: this.angleFromValue(value)
    };
    arc_data = arc(arc_params);
    return React.createElement("svg", {
      "className": 'gauge-chart',
      "key": 'gauge',
      "style": {
        position: 'relative',
        width: width,
        height: height
      }
    }, React.createElement("g", {
      "key": 'mover',
      "transform": "translate(" + (radius + label_padding) + ", " + (radius + label_padding) + ")"
    }, (!(guide != null ? guide.hidden : void 0) ? this.renderGuide() : void 0), React.createElement("g", {
      "className": 'gauge-bar'
    }, React.createElement("path", {
      "x": radius,
      "y": radius,
      "d": arc_data,
      "fill": color
    })), (show_value ? React.createElement("text", {
      "className": 'value',
      "x": 0,
      "y": label_y,
      "alignment-baseline": 'middle',
      "text-anchor": 'middle'
    }, value) : void 0), markers != null ? markers.map(this.renderMarker.bind(this)) : void 0));
  };

  Gauge.prototype.renderGuide = function() {
    var arc, arc_data, arc_params, end_angle, guide, radius, ref, start_angle;
    ref = this.props, start_angle = ref.start_angle, end_angle = ref.end_angle, guide = ref.guide;
    radius = this.computeRadius();
    arc = d3.arc().innerRadius(radius - guide.thickness).outerRadius(radius).padRadius(2).cornerRadius(2);
    arc_params = {
      startAngle: start_angle,
      endAngle: end_angle
    };
    arc_data = arc(arc_params);
    return React.createElement("g", {
      "key": 'guide',
      "className": 'guide'
    }, React.createElement("path", {
      "key": 'guide-path',
      "x": radius,
      "y": radius,
      "d": arc_data,
      "fill": guide.color
    }));
  };

  Gauge.prototype.renderMarker = function(marker, i) {
    var angle, arc, arc_data, arc_params, bar, label_x, label_y, marker_angle, radius, ref;
    console.log('[marker]', marker);
    bar = this.props.bar;
    radius = this.computeRadius();
    angle = this.angleFromValue(marker.value);
    marker_angle = marker.angle || 0.05;
    arc = d3.arc().innerRadius(radius - bar.thickness).outerRadius(radius);
    arc_params = {
      startAngle: angle - marker_angle / 2,
      endAngle: angle + marker_angle / 2
    };
    arc_data = arc(arc_params);
    ref = arc.outerRadius(radius + 75).centroid(arc_params), label_x = ref[0], label_y = ref[1];
    return React.createElement("g", {
      "key": i
    }, React.createElement("path", {
      "key": i,
      "className": 'marker',
      "x": radius,
      "y": radius,
      "d": arc_data,
      "fill": marker.color,
      "onClick": typeof onClick !== "undefined" && onClick !== null ? onClick.bind(null, marker) : void 0
    }), (marker.label ? React.createElement("text", {
      "className": 'marker-label',
      "x": label_x - 35,
      "y": label_y,
      "key": 'label',
      "style": {
        fontWeight: 'bold'
      }
    }, marker.label) : void 0));
  };

  return Gauge;

})(React.Component);

Gauge.defaultProps = {
  min: 0,
  max: 0,
  start_angle: 0,
  end_angle: Math.PI * 2,
  bar: {
    thickness: 25
  },
  guide: {
    thickness: 25,
    hidden: false
  },
  label_padding: 0,
  label_y: 0
};

module.exports = Gauge;
