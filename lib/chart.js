// Generated by CoffeeScript 1.10.0
var Chart, Follower, React, XAxis, YAxis, d3, flatten, ref;

React = require('react');

d3 = require('d3');

ref = require('./axes'), XAxis = ref.XAxis, YAxis = ref.YAxis;

Follower = require('./follower');

flatten = function(ls) {
  var flat, i, j, k, l, len, len1;
  flat = [];
  for (j = 0, len = ls.length; j < len; j++) {
    l = ls[j];
    if (Array.isArray(l)) {
      for (k = 0, len1 = l.length; k < len1; k++) {
        i = l[k];
        flat.push(i);
      }
    }
  }
  return flat;
};

module.exports = Chart = React.createClass({displayName: "Chart",
  getDefaultProps: function() {
    return {
      padding: 0,
      axis_size: 50,
      color: d3.scaleOrdinal(d3.schemeCategory10)
    };
  },
  getInitialState: function() {
    return {
      mouseX: 200,
      mouseY: 200
    };
  },
  componentWillMount: function() {
    return this.createAxes(this.props);
  },
  componentWillReceiveProps: function(next_props) {
    return this.createAxes(next_props);
  },
  createAxes: function(props) {
    var adjust, axis_size, chart_height, chart_width, data, datas, height, options, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, width, x, x_extent, y, y_extent;
    width = props.width, height = props.height, data = props.data, datas = props.datas, adjust = props.adjust, options = props.options, axis_size = props.axis_size;
    if ((data == null) && (datas != null)) {
      data = flatten(datas);
    }
    chart_height = height - axis_size;
    chart_width = width - axis_size;
    x_extent = ((ref1 = this.props.options) != null ? (ref2 = ref1.axes) != null ? (ref3 = ref2.x) != null ? ref3.range : void 0 : void 0 : void 0) || d3.extent(data, function(d) {
      return d.x;
    });
    if (adjust) {
      x_extent[0] -= 0.5;
      x_extent[1] += 0.5;
    }
    y_extent = ((ref4 = this.props.options) != null ? (ref5 = ref4.axes) != null ? (ref6 = ref5.y) != null ? ref6.range : void 0 : void 0 : void 0) || d3.extent(data, function(d) {
      return d.y;
    });
    if (options != null ? (ref7 = options.axes) != null ? (ref8 = ref7.y) != null ? ref8.zero : void 0 : void 0 : void 0) {
      y_extent = [
        0, d3.max(data, function(d) {
          return d.y;
        })
      ];
    }
    x = d3.scaleLinear().range([0, chart_width]).domain(x_extent);
    y = d3.scaleLinear().range([chart_height, 0]).domain(y_extent);
    return this.setState({
      x: x,
      y: y
    });
  },
  onMouseMove: function(e) {
    var bounds, mouseX, mouseY;
    bounds = this.refs.container.getBoundingClientRect();
    mouseX = e.clientX - bounds.left;
    mouseY = e.clientY - bounds.top;
    return this.setState({
      mouseX: mouseX,
      mouseY: mouseY
    });
  },
  render: function() {
    var adjust, axis_size, chart_height, chart_options, chart_width, children, color, colorer, data, datas, height, options, padding, ref1, ref2, ref3, ref4, ref5, ref6, ref7, show_follower, title, width;
    ref1 = this.props, width = ref1.width, height = ref1.height, data = ref1.data, datas = ref1.datas, title = ref1.title, children = ref1.children, adjust = ref1.adjust, padding = ref1.padding, colorer = ref1.colorer, axis_size = ref1.axis_size, color = ref1.color, options = ref1.options;
    if ((data != null) && (datas == null)) {
      datas = [data];
    }
    if (options != null) {
      chart_options = options.chart;
      show_follower = options.show_follower;
    }
    chart_height = height - axis_size;
    chart_width = width - axis_size;
    return React.createElement("div", {
      "className": 'chart',
      "ref": 'container',
      "style": {
        position: 'relative',
        padding: padding,
        width: width,
        height: height
      },
      "onMouseMove": this.onMouseMove
    }, (title ? React.createElement("div", {
      "className": 'title'
    }, title) : void 0), datas.map((function(_this) {
      return function(data, di) {
        return React.cloneElement(children, {
          width: chart_width,
          height: chart_height,
          data: data,
          axis_size: axis_size,
          padding: padding,
          colorer: colorer,
          options: chart_options,
          key: data.id || di,
          color: color(data.id || di),
          x: _this.state.x,
          y: _this.state.y
        });
      };
    })(this)), (!(options != null ? (ref2 = options.axes) != null ? (ref3 = ref2.x) != null ? ref3.hidden : void 0 : void 0 : void 0) ? React.createElement(XAxis, {
      "x": this.state.x,
      "width": chart_width,
      "axis_size": axis_size,
      "padding": padding,
      "position": 'bottom',
      "options": options != null ? (ref4 = options.axes) != null ? ref4.x : void 0 : void 0
    }) : void 0), (!(options != null ? (ref5 = options.axes) != null ? (ref6 = ref5.y) != null ? ref6.hidden : void 0 : void 0 : void 0) ? React.createElement(YAxis, {
      "y": this.state.y,
      "axis_size": axis_size,
      "height": chart_height,
      "padding": padding,
      "options": options != null ? (ref7 = options.axes) != null ? ref7.y : void 0 : void 0
    }) : void 0), (show_follower ? React.createElement(Follower, {
      "width": width,
      "height": height,
      "datas": datas,
      "color": color,
      "x": this.state.x,
      "y": this.state.y,
      "mouseX": this.state.mouseX,
      "mouseY": this.state.mouseY
    }) : void 0));
  }
});
