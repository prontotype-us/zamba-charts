// Generated by CoffeeScript 1.10.0
var Chart, Follower, React, XAxis, YAxis, d3, flatten, ref;

React = require('react');

d3 = require('d3');

ref = require('./axes'), XAxis = ref.XAxis, YAxis = ref.YAxis;

Follower = require('./follower');

flatten = function(ls) {
  var flat, i, j, k, l, len, len1;
  flat = [];
  for (j = 0, len = ls.length; j < len; j++) {
    l = ls[j];
    if (Array.isArray(l)) {
      for (k = 0, len1 = l.length; k < len1; k++) {
        i = l[k];
        flat.push(i);
      }
    }
  }
  return flat;
};

module.exports = Chart = React.createClass({displayName: "Chart",
  getDefaultProps: function() {
    return {
      padding: 0,
      axis_size: 50,
      color: d3.scaleOrdinal(d3.schemeCategory10)
    };
  },
  getInitialState: function() {
    return {
      mouseX: 200,
      mouseY: 200
    };
  },
  componentWillMount: function() {
    return this.createAxes();
  },
  componentWillReceiveProps: function() {
    return this.createAxes();
  },
  createAxes: function() {
    var adjust, data, datas, height, ref1, width, x_extent, y_extent;
    ref1 = this.props, width = ref1.width, height = ref1.height, data = ref1.data, datas = ref1.datas, adjust = ref1.adjust;
    if ((data == null) && (datas != null)) {
      data = flatten(datas);
    }
    x_extent = d3.extent(data, function(d) {
      return d.x;
    });
    if (adjust) {
      x_extent[0] -= 0.5;
      x_extent[1] += 0.5;
    }
    y_extent = d3.extent(data, function(d) {
      return d.y;
    });
    if (false) {
      y_extent = [
        0, d3.max(data, function(d) {
          return d.y;
        })
      ];
    }
    this.x = d3.scaleLinear().range([0, width]).domain(x_extent);
    return this.y = d3.scaleLinear().range([height, 0]).domain(y_extent);
  },
  onMouseMove: function(e) {
    var bounds, mouseX, mouseY;
    bounds = this.refs.container.getBoundingClientRect();
    mouseX = e.clientX - bounds.left;
    mouseY = e.clientY - bounds.top;
    return this.setState({
      mouseX: mouseX,
      mouseY: mouseY
    });
  },
  render: function() {
    var adjust, axis_size, children, color, data, datas, height, padding, ref1, title, width;
    ref1 = this.props, width = ref1.width, height = ref1.height, data = ref1.data, datas = ref1.datas, title = ref1.title, children = ref1.children, adjust = ref1.adjust, padding = ref1.padding, axis_size = ref1.axis_size, color = ref1.color;
    if ((data != null) && (datas == null)) {
      datas = [data];
    }
    return React.createElement("div", {
      "className": 'chart',
      "ref": 'container',
      "style": {
        position: 'relative',
        padding: padding,
        width: width,
        height: height
      },
      "onMouseMove": this.onMouseMove
    }, datas.map((function(_this) {
      return function(data, di) {
        return React.cloneElement(children, {
          width: width,
          height: height,
          data: data,
          padding: padding,
          key: data.id || di,
          color: color(data.id || di),
          x: _this.x,
          y: _this.y
        });
      };
    })(this)), React.createElement(XAxis, {
      "x": this.x,
      "width": width,
      "height": axis_size,
      "padding": padding,
      "position": 'bottom'
    }), React.createElement(YAxis, {
      "y": this.y,
      "width": axis_size,
      "height": height,
      "padding": padding
    }), React.createElement(Follower, {
      "width": width,
      "height": height,
      "datas": datas,
      "color": color,
      "x": this.x,
      "y": this.y,
      "mouseX": this.state.mouseX,
      "mouseY": this.state.mouseY
    }));
  }
});
