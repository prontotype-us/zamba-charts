// Generated by CoffeeScript 1.10.0
var Chart, Follower, React, XAxis, YAxis, d3, flatten, helpers, ref;

React = require('react');

d3 = require('d3');

ref = require('./axes'), XAxis = ref.XAxis, YAxis = ref.YAxis;

Follower = require('./follower');

helpers = require('./helpers');

flatten = function(ls) {
  var flat, i, j, k, l, len, len1;
  flat = [];
  for (j = 0, len = ls.length; j < len; j++) {
    l = ls[j];
    if (Array.isArray(l)) {
      for (k = 0, len1 = l.length; k < len1; k++) {
        i = l[k];
        flat.push(i);
      }
    }
  }
  return flat;
};

module.exports = Chart = {
  getDefaultProps: function() {
    return {
      width: 100,
      height: 100,
      padding: 0,
      axis_size: 25,
      color: d3.scaleOrdinal(d3.schemeCategory10)
    };
  },
  getInitialState: function() {
    return {
      mouseX: 200,
      mouseY: 200
    };
  },
  componentWillMount: function() {
    return this.createAxes(this.props);
  },
  componentWillReceiveProps: function(next_props) {
    return this.createAxes(next_props);
  },
  skip_shouldComponentUpdate: function(next_props, next_state) {
    if (next_props.data.length !== this.props.data.length) {
      return true;
    } else if ((next_props.width !== this.props.width) || (next_props.height !== this.props.height)) {
      return true;
    } else if ((next_props.y !== this.props.y) || (next_props.x !== this.props.x)) {
      return true;
    } else {
      return false;
    }
  },
  createAxes: function(props) {
    var _data, data, flat_data, height, i, j, k, len, len1, padding, width, x, x_axis, x_extent, y, y_axis, y_extent;
    x = props.x, y = props.y, width = props.width, height = props.height, data = props.data, padding = props.padding, x_axis = props.x_axis, y_axis = props.y_axis;
    padding = helpers.transformPadding(padding);
    if (this.multi) {
      flat_data = [];
      for (j = 0, len = data.length; j < len; j++) {
        _data = data[j];
        for (k = 0, len1 = _data.length; k < len1; k++) {
          i = _data[k];
          flat_data.push(i);
        }
      }
    } else {
      flat_data = data;
    }
    if (x == null) {
      x_extent = (x_axis != null ? x_axis.domain : void 0) || (typeof this.xDomain === "function" ? this.xDomain() : void 0) || d3.extent(flat_data, function(d) {
        return d.x;
      });
      x = d3.scaleLinear().range([padding.left, width - padding.right]).domain(x_extent);
    }
    if (y == null) {
      y_extent = (y_axis != null ? y_axis.domain : void 0) || d3.extent(flat_data, function(d) {
        return d.y;
      });
      if (y_axis != null ? y_axis.zero : void 0) {
        y_extent = [
          0, d3.max(flat_data, function(d) {
            return d.y;
          })
        ];
      }
      y = d3.scaleLinear().range([height - padding.bottom, padding.top]).domain(y_extent);
    }
    return this.setState({
      x: x,
      y: y
    });
  },
  onMouseMove: function(e) {
    var bounds, mouseX, mouseY;
    if (!this.props.follower) {
      return;
    }
    bounds = this.refs.container.getBoundingClientRect();
    mouseX = e.clientX - bounds.left;
    mouseY = e.clientY - bounds.top;
    return this.setState({
      mouseX: mouseX,
      mouseY: mouseY
    });
  },
  render: function() {
    var axis_size, color, data, follower, height, padding, ref1, title, width, x_axis, y_axis;
    ref1 = this.props, width = ref1.width, height = ref1.height, data = ref1.data, title = ref1.title, color = ref1.color, padding = ref1.padding, axis_size = ref1.axis_size, follower = ref1.follower, x_axis = ref1.x_axis, y_axis = ref1.y_axis;
    padding = helpers.transformPadding(padding);
    x_axis || (x_axis = {});
    y_axis || (y_axis = {});
    return React.createElement("div", {
      "className": 'chart',
      "ref": 'container',
      "style": {
        position: 'relative',
        width: width,
        height: height
      },
      "onMouseMove": this.onMouseMove
    }, (title ? React.createElement("div", {
      "className": 'title'
    }, title) : void 0), this.renderChart(), (!x_axis.hidden ? React.createElement(XAxis, Object.assign({
      "x": this.state.x,
      "width": width,
      "height": axis_size,
      "position": 'bottom'
    }, x_axis)) : void 0), (!y_axis.hidden ? React.createElement(YAxis, Object.assign({
      "y": this.state.y,
      "height": height,
      "width": axis_size,
      "position": 'left'
    }, y_axis)) : void 0), (follower ? (typeof follower === 'boolean' ? follower = {} : void 0, React.createElement(Follower, Object.assign({
      "width": width,
      "height": height,
      "data": data,
      "color": color,
      "x": this.state.x,
      "y": this.state.y,
      "mouseX": this.state.mouseX,
      "mouseY": this.state.mouseY,
      "multi": this.multi
    }, follower))) : void 0));
  }
};
