// Generated by CoffeeScript 1.10.0
var BarChart, Chart, Histogram, React, d3;

d3 = require('d3');

React = require('react');

BarChart = require('./bar');

Chart = require('./chart');

module.exports = Histogram = React.createClass({displayName: "Histogram",
  binData: function() {
    var bin_key, bin_size, bins, data, i, max, min, n_bins, ref, results, values;
    ref = this.props, data = ref.data, bin_key = ref.bin_key, min = ref.min, max = ref.max, n_bins = ref.n_bins, bin_size = ref.bin_size;
    values = data.map(function(d) {
      return d.value || d;
    });
    if (this.props.min == null) {
      min = Math.min.apply(Math, values);
    }
    if (this.props.max == null) {
      max = Math.max.apply(Math, values);
    }
    if (bin_size != null) {
      n_bins = Math.ceil((max - min) / bin_size);
    } else {
      n_bins || (n_bins = 10);
      bin_size = (max - min) / n_bins;
    }
    bins = (function() {
      results = [];
      for (var i = 0; 0 <= n_bins ? i <= n_bins : i >= n_bins; 0 <= n_bins ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this).map(function(t) {
      var in_this_bin, s_max, s_min;
      s_min = min + (t * bin_size);
      s_max = min + ((t + 1) * bin_size) - 1;
      in_this_bin = values.filter(function(s) {
        var val;
        if (bin_key != null) {
          val = s[bin_key];
        } else {
          val = s;
        }
        return (val < s_max) && (val > s_min);
      });
      return {
        x: (s_max + s_min) / 2,
        y: in_this_bin.length
      };
    });
    return bins;
  },
  render: function() {
    var axis_size, bin_size, bins, data, height, max, min, n_bins, ref, title, values, width, x, y;
    ref = this.props, width = ref.width, height = ref.height, data = ref.data, x = ref.x, y = ref.y, axis_size = ref.axis_size, min = ref.min, max = ref.max, n_bins = ref.n_bins, title = ref.title, bin_size = ref.bin_size;
    bins = this.binData();
    values = data.map(function(d) {
      return d.value || d;
    });
    if (this.props.min == null) {
      min = Math.min.apply(Math, values);
    }
    if (this.props.max == null) {
      max = Math.max.apply(Math, values);
    }
    x = d3.scaleLinear().domain([min, max]).range([0, width]);
    y = d3.scaleLinear().domain([
      0, d3.max(bins, function(d) {
        return d.y;
      })
    ]).range([height, 0]);
    return React.createElement(Chart, {
      "width": width,
      "height": height,
      "data": bins,
      "title": title,
      "axis_size": axis_size
    }, React.createElement(BarChart, {
      "axis_size": axis_size,
      "x": x,
      "y": y
    }));
  }
});
