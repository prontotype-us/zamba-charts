// Generated by CoffeeScript 1.8.0
var Chart, React, ScatterChart, d3, helpers,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

React = require('preact');

d3 = require('d3');

Chart = require('./chart');

helpers = require('./helpers');

module.exports = ScatterChart = (function(_super) {
  __extends(ScatterChart, _super);

  function ScatterChart() {
    return ScatterChart.__super__.constructor.apply(this, arguments);
  }

  ScatterChart.prototype.renderChart = function() {
    var color, data, height, r, width, x, y, _ref, _ref1;
    _ref = this.props, width = _ref.width, height = _ref.height, data = _ref.data, color = _ref.color, r = _ref.r;
    _ref1 = this.state, x = _ref1.x, y = _ref1.y;
    r || (r = 4);
    return React.createElement("svg", {
      "className": 'scatter-chart',
      "style": {
        width: width,
        height: height,
        position: 'absolute'
      },
      "height": height,
      "width": width
    }, data.map((function(_this) {
      return function(d, i) {
        var renderPoint, _ref2, _ref3;
        if (renderPoint = (_ref2 = _this.props) != null ? (_ref3 = _ref2.options) != null ? _ref3.renderPoint : void 0 : void 0) {
          return renderPoint(d, {
            x: x,
            y: y
          }, i);
        } else {
          return React.createElement("circle", {
            "className": 'dot',
            "key": i,
            "r": r,
            "cx": x(d.x),
            "cy": y(d.y),
            "stroke": helpers.interpretColor(color, d),
            "fill": helpers.interpretColor(color, d),
            "onClick": typeof onClick !== "undefined" && onClick !== null ? onClick.bind(null, data[di]) : void 0
          });
        }
      };
    })(this)));
  };

  return ScatterChart;

})(Chart);
