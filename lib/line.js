// Generated by CoffeeScript 1.8.0
var Chart, LineChart, React, d3, helpers,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

React = require('react');

d3 = require('d3');

Chart = require('./chart');

helpers = require('./helpers');

module.exports = LineChart = (function(_super) {
  __extends(LineChart, _super);

  function LineChart() {
    return LineChart.__super__.constructor.apply(this, arguments);
  }

  LineChart.prototype.renderChart = function() {
    var color, curve, d, da, data, fill, first_point, height, last_point, line, width, x, y, _ref, _ref1;
    _ref = this.props, width = _ref.width, height = _ref.height, data = _ref.data, curve = _ref.curve, fill = _ref.fill, color = _ref.color;
    _ref1 = this.state, x = _ref1.x, y = _ref1.y;
    console.log('[LineChart.render] data=', data);
    line = d3.line().curve(curve ? d3.curveMonotoneX : d3.curveLinear).x(function(d) {
      return x(d.x);
    }).y(function(d) {
      return y(d.y);
    });
    d = line(data);
    return React.createElement("svg", {
      "className": 'line-chart',
      "style": {
        width: width,
        height: height,
        position: 'absolute',
        top: 0
      }
    }, (fill ? (first_point = {
      x: x.domain()[0],
      y: y.domain()[0]
    }, last_point = {
      x: x.domain()[1],
      y: y.domain()[0]
    }, da = line([first_point].concat(data).concat([last_point])), React.createElement("path", {
      "d": da,
      "fill": helpers.interpretColor(color, 0),
      "opacity": 0.2,
      "stroke": 'none'
    })) : void 0), React.createElement("path", {
      "d": d,
      "fill": 'none',
      "stroke": helpers.interpretColor(color, 0),
      "strokeWidth": 2
    }));
  };

  return LineChart;

})(Chart);
